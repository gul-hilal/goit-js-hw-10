{"version":3,"file":"1-timer.js","sources":["../src/js/1-timer.js"],"sourcesContent":["import flatpickr from 'flatpickr';\nimport 'flatpickr/dist/flatpickr.min.css';\nimport iziToast from 'izitoast';\nimport 'izitoast/dist/css/iziToast.min.css';\n\nconst inputEl = document.querySelector('#datetime-picker');\nconst startBtn = document.querySelector('[data-start]');\nconst daysEl = document.querySelector('[data-days]');\nconst hoursEl = document.querySelector('[data-hours]');\nconst minutesEl = document.querySelector('[data-minutes]');\nconst secondsEl = document.querySelector('[data-seconds]');\n\nstartBtn.disabled = true;\nlet selectedDate = null;\nlet timerId = null;\n\nflatpickr(inputEl, {\n  enableTime: true,\n  time_24hr: true,\n  defaultDate: new Date(),\n  minuteIncrement: 1,\n  onClose(selectedDates) {\n    selectedDate = selectedDates[0];\n\n    if (selectedDate - Date.now() <= 0) {\n      startBtn.disabled = true;\n      iziToast.error({\n        message: 'Please choose a date in the future',\n        position: 'topRight',\n      });\n    } else {\n      startBtn.disabled = false;\n    }\n  },\n});\n\nconst addLeadingZero = value => String(value).padStart(2, '0');\n\nconst convertMs = ms => {\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n\n  const days = Math.floor(ms / day);\n  const hours = Math.floor((ms % day) / hour);\n  const minutes = Math.floor((ms % hour) / minute);\n  const seconds = Math.floor((ms % minute) / second);\n\n  return { days, hours, minutes, seconds };\n};\n\nconst updateClock = ({ days, hours, minutes, seconds }) => {\n  daysEl.textContent = addLeadingZero(days);\n  hoursEl.textContent = addLeadingZero(hours);\n  minutesEl.textContent = addLeadingZero(minutes);\n  secondsEl.textContent = addLeadingZero(seconds);\n};\n\nconst updateTimer = () => {\n  const diff = selectedDate - Date.now();\n\n  if (diff <= 0) {\n    clearInterval(timerId);\n    updateClock({ days: 0, hours: 0, minutes: 0, seconds: 0 });\n    return;\n  }\n\n  updateClock(convertMs(diff));\n};\n\nstartBtn.addEventListener('click', () => {\n  clearInterval(timerId);\n  updateTimer();\n  timerId = setInterval(updateTimer, 1000);\n});\n"],"names":["inputEl","startBtn","daysEl","hoursEl","minutesEl","secondsEl","selectedDate","timerId","flatpickr","selectedDates","iziToast","addLeadingZero","value","convertMs","ms","days","hours","minutes","seconds","updateClock","updateTimer","diff"],"mappings":"0IAKA,MAAMA,EAAU,SAAS,cAAc,kBAAkB,EACnDC,EAAW,SAAS,cAAc,cAAc,EAChDC,EAAS,SAAS,cAAc,aAAa,EAC7CC,EAAU,SAAS,cAAc,cAAc,EAC/CC,EAAY,SAAS,cAAc,gBAAgB,EACnDC,EAAY,SAAS,cAAc,gBAAgB,EAEzDJ,EAAS,SAAW,GACpB,IAAIK,EAAe,KACfC,EAAU,KAEdC,EAAUR,EAAS,CACjB,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAQS,EAAe,CACrBH,EAAeG,EAAc,CAAC,EAE1BH,EAAe,KAAK,IAAG,GAAM,GAC/BL,EAAS,SAAW,GACpBS,EAAS,MAAM,CACb,QAAS,qCACT,SAAU,UAClB,CAAO,GAEDT,EAAS,SAAW,EAEvB,CACH,CAAC,EAED,MAAMU,EAAiBC,GAAS,OAAOA,CAAK,EAAE,SAAS,EAAG,GAAG,EAEvDC,EAAYC,GAAM,CAMtB,MAAMC,EAAO,KAAK,MAAMD,EAAK,KAAG,EAC1BE,EAAQ,KAAK,MAAOF,EAAK,MAAO,IAAI,EACpCG,EAAU,KAAK,MAAOH,EAAK,KAAQ,GAAM,EACzCI,EAAU,KAAK,MAAOJ,EAAK,IAAU,GAAM,EAEjD,MAAO,CAAE,KAAAC,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CACxC,EAEMC,EAAc,CAAC,CAAE,KAAAJ,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,IAAO,CACzDhB,EAAO,YAAcS,EAAeI,CAAI,EACxCZ,EAAQ,YAAcQ,EAAeK,CAAK,EAC1CZ,EAAU,YAAcO,EAAeM,CAAO,EAC9CZ,EAAU,YAAcM,EAAeO,CAAO,CAChD,EAEME,EAAc,IAAM,CACxB,MAAMC,EAAOf,EAAe,KAAK,IAAG,EAEpC,GAAIe,GAAQ,EAAG,CACb,cAAcd,CAAO,EACrBY,EAAY,CAAE,KAAM,EAAG,MAAO,EAAG,QAAS,EAAG,QAAS,CAAC,CAAE,EACzD,MACD,CAEDA,EAAYN,EAAUQ,CAAI,CAAC,CAC7B,EAEApB,EAAS,iBAAiB,QAAS,IAAM,CACvC,cAAcM,CAAO,EACrBa,IACAb,EAAU,YAAYa,EAAa,GAAI,CACzC,CAAC"}